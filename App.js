import { SafeAreaView, StyleSheet, Text, View, StatusBar, Button, Platform } from 'react-native';

import * as Notifications from "expo-notifications";
import { useEffect, useState } from 'react';

/* Manipulador de eventos de notificaÃ§Ã£o */
Notifications.setNotificationHandler({
  handleNotification: async() => {
    return {
      shouldPlaySound: true,
      shouldShowAlert: true,
      shouldSetBadge: true,
    }
  }
});

export default function App() {

  const [dados, setDados] = useState(null);

  useEffect( () => {

    /* NecessÃ¡rio para iOS */
    async function permissoesIos() {
      return await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowSound: true,
          allowBadge: true,
          allowAnnouncements: true
        }
      });
    }

    permissoesIos();


    
    /*** BRANCH 02: CÃ“DIGO PARA O EXEMPLO DE PUSH NOTIFICATION */

    /* Para testar as 'push notifications', entre no site https://expo.dev/notifications
    e preencha o campo "To (Expo push token from your app)" com o token do seu aparelho (veja no console/terminal), e coloque
    tambÃ©m um tÃ­tulo ("Message title") e um texto ("Message body") para a mensagem.
    
    Em seguida, clique em "Send a notifications" */

    /* Obter as permissÃµes atuais do dispositivo */
    Notifications.getPermissionsAsync().then(status => {
      if(status.granted){
        /* PermissÃµes ok? EntÃ£o vamos obter o token expo do aparelho.
        Este token Ã© um cÃ³digo identificador Ãºnico de cada aparelho que utilize um app atravÃ©s do Expo Go.
        Ã‰ atravÃ©s dele que a notificaÃ§Ã£o serÃ¡ enviada. */
        Notifications.getExpoPushTokenAsync().then(token => {
          console.log(token);
        })
      }
    })

    /*** BRANCH 02: FIM DO CÃ“DIGO PARA O EXEMPLO DE PUSH NOTIFICATION */




    /* Ouvinte de evento para as notificaÃ§Ãµes recebidas, ou seja,
    quando a notificaÃ§Ã£o aparece no topo da tela do dispositivo. */
    Notifications.addNotificationReceivedListener(notificacao => {
      console.log(notificacao);
    });
    
    /* Ouvinte de evento para as respostas dadas Ã s notificaÃ§Ãµes, ou seja,
    quando o usuÃ¡rio interage (toca) na notificaÃ§Ã£o. */
    Notifications.addNotificationResponseReceivedListener(resposta => {
      console.log(resposta.notification.request.content.data);
      setDados(resposta.notification.request.content.data);
    });
  
  }, []);

  const enviarMensagem = async() => {
    const mensagem = {
      title: "Lembrete! ðŸ˜€",
      body: "NÃ£o se esqueÃ§a de tomar Ã¡gua, senÃ£o vocÃª morre ðŸ’€!",
      data: { usuario: "Tiago ðŸ‘½", cidade: "SÃ£o Paulo" },
      sound: Platform.OS === 'ios' ? "default" : "", // necessÃ¡rio pro iOS
    };

    /* FunÃ§Ã£o de agendamento de notificaÃ§Ãµes */
    await Notifications.scheduleNotificationAsync({
      content: mensagem,
      trigger: { seconds: 5 }
    });
  }

  return (
    <>
      <StatusBar />
      <SafeAreaView style={styles.container}>
        <Text>Exemplo de sistema de notificaÃ§Ã£o push</Text>
        <Button title='Disparar notificaÃ§Ã£o' onPress={enviarMensagem} />

        { dados && 
          <View style={styles.conteudo}>
            <Text> {dados.usuario} </Text>
            <Text> {dados.cidade} </Text>
          </View>
        }

      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  conteudo: {
    marginVertical: 8,
    backgroundColor: "yellow",
    padding: 8
  }
});
